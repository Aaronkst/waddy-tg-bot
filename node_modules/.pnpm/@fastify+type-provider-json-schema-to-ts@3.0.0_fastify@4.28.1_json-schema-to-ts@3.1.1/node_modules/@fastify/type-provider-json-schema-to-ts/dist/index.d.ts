import { FastifyBaseLogger, FastifyPluginAsync, FastifyPluginCallback, FastifyPluginOptions, FastifyTypeProvider, RawServerBase, RawServerDefault } from 'fastify';
import { FromSchema, FromSchemaDefaultOptions, FromSchemaOptions, JSONSchema } from 'json-schema-to-ts';
export interface JsonSchemaToTsProvider<Options extends FromSchemaOptions = FromSchemaDefaultOptions> extends FastifyTypeProvider {
    output: this['input'] extends JSONSchema ? FromSchema<this['input'], Options> : unknown;
}
export type FastifyPluginCallbackJsonSchemaToTs<Options extends FastifyPluginOptions = Record<never, never>, Server extends RawServerBase = RawServerDefault, Logger extends FastifyBaseLogger = FastifyBaseLogger> = FastifyPluginCallback<Options, Server, JsonSchemaToTsProvider, Logger>;
export type FastifyPluginAsyncJsonSchemaToTs<Options extends FastifyPluginOptions = Record<never, never>, Server extends RawServerBase = RawServerDefault, Logger extends FastifyBaseLogger = FastifyBaseLogger> = FastifyPluginAsync<Options, Server, JsonSchemaToTsProvider, Logger>;
